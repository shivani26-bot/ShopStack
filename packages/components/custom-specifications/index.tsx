import React from "react";
import { Controller, useFieldArray } from "react-hook-form";
import Input from "../input";
import { PlusCircle, Trash2 } from "lucide-react";

const CustomSpecifications = ({ control, errors }: any) => {
  // React Hook Form’s useFieldArray:useFieldArray connects a list of fields (custom-specifications) to your form.
  // It’s a special hook that helps you manage dynamic fields (like a list of specifications, phone numbers, addresses, etc. where users can add/remove multiple items).
  // control: This is passed from useForm() in your parent component.
  // control tells React Hook Form that these dynamic fields belong to the same form and should be tracked/validated.
  //   name: "custom-specifications"
  // This is the form field name under which the array will be stored.
  // So when the form submits, you’ll get something like:
  // {
  //   "custom-specifications": [
  //     { "name": "Material", "value": "Cotton" },
  //     { "name": "Warranty", "value": "2 years" }
  //   ]
  // }
  //   fields
  // This is an array of objects that represent your current list of fields.
  // Each object has an id (generated by React Hook Form) so React can track them properly.
  //   fields = [
  //   { id: "abc123", name: "Material", value: "Cotton" },
  //   { id: "xyz456", name: "Warranty", value: "2 years" }
  // ];
  // You map over fields to render inputs:
  // append:append({ name: "", value: "" });
  // A function you call to add a new item to the array.
  // remove:remove(index);
  // A function you call to delete an item from the array.This removes the specification at position index.
  // fields is the current list.
  // append adds new rows.
  // remove deletes rows.
  const { fields, append, remove } = useFieldArray({
    control,
    name: "custom-specifications",
  });
  return (
    <div>
      <label className="block font-semibold text-gray-300 mb-1">
        Custom Specifications
      </label>
      <div className="flex flex-col gap-3">
        {fields?.map((item, index) => (
          <div key={index} className="flex gap-2 items-center">
            {/* Controller is a wrapper that connects your custom component (<Input />) to React Hook Form.
            name → field path inside the form state (custom_specifications[0].name, custom_specifications[1].name, etc.).
control → comes from useForm(), required to track the input.
rules → adds validation (required with a custom error message).
render={({ field }) => (...)} → React Hook Form injects field props like onChange, onBlur, value, and ref.
You spread {...field} into your <Input />, making it a controlled form input.
            */}
            <Controller
              name={`custom_specifications.${index}.name`}
              control={control}
              rules={{ required: "Specification name is required" }}
              render={({ field }) => (
                <Input
                  label="Specification Name"
                  placeholder="e.g., Battery Life, Weight, Material"
                  {...field}
                />
              )}
            />
            <Controller
              name={`custom_specifications.${index}.value`}
              control={control}
              rules={{ required: "Value is required" }}
              render={({ field }) => (
                <Input
                  label="Value"
                  placeholder="e.g., 4000mAh, 1.5kg, Plastic"
                  {...field}
                />
              )}
            />
            <button
              type="button"
              className="text-red-500 hover:text-red-700"
              onClick={() => remove(index)} //remove(index) → deletes this specification row from the field array.
            >
              <Trash2 className="mt-6" size={20} />
            </button>
          </div>
        ))}
        {/* append → comes from useFieldArray({ control, name: "custom-specifications" }).
It pushes a new object into the field array.
In this case: { name: "", value: "" }.
So it adds an empty specification row. */}
        <button
          type="button"
          className="flex items-center gap-2 text-blue-500 hover:text-blue-600"
          onClick={() => append({ name: "", value: "" })}
        >
          <PlusCircle size={20} /> Add Specification
        </button>
      </div>
      {errors?.custom_specifications && (
        <p className="text-red-500 text-xs mt-1">
          {errors.custom_specifications.message as string}
        </p>
      )}
    </div>
  );
};

export default CustomSpecifications;
